// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`AST Parser > AssignExpression 1`] = `
{
  "end": 5,
  "expression": {
    "end": 4,
    "left": {
      "end": 0,
      "name": "a",
      "start": 0,
      "type": "identifier",
    },
    "operator": "=",
    "right": {
      "end": 4,
      "raw": "1",
      "start": 4,
      "type": "literal",
      "value": 1,
    },
    "start": 0,
    "type": "assign-expression",
  },
  "start": 0,
  "type": "expression-statement",
}
`;

exports[`AST Parser > BinaryExpression 1`] = `
{
  "end": 5,
  "expression": {
    "end": 4,
    "left": {
      "end": 0,
      "name": "a",
      "start": 0,
      "type": "identifier",
    },
    "operator": "+",
    "right": {
      "end": 4,
      "raw": "1",
      "start": 4,
      "type": "literal",
      "value": 1,
    },
    "start": 0,
    "type": "binary-expression",
  },
  "start": 0,
  "type": "expression-statement",
}
`;

exports[`AST Parser > BinaryExpression 2`] = `
{
  "end": 9,
  "expression": {
    "end": 8,
    "left": {
      "end": -1,
      "left": {
        "end": 0,
        "name": "a",
        "start": 0,
        "type": "identifier",
      },
      "operator": "-",
      "right": {
        "end": 4,
        "raw": "1",
        "start": 4,
        "type": "literal",
        "value": 1,
      },
      "start": 0,
      "type": "binary-expression",
    },
    "operator": "+",
    "right": {
      "end": 8,
      "raw": "1",
      "start": 8,
      "type": "literal",
      "value": 1,
    },
    "start": 0,
    "type": "binary-expression",
  },
  "start": 0,
  "type": "expression-statement",
}
`;

exports[`AST Parser > BinaryExpression 3`] = `
{
  "end": 11,
  "expression": {
    "end": 10,
    "left": {
      "end": 0,
      "name": "a",
      "start": 0,
      "type": "identifier",
    },
    "operator": "+",
    "right": {
      "end": 10,
      "left": {
        "end": 5,
        "raw": "1",
        "start": 5,
        "type": "literal",
        "value": 1,
      },
      "operator": "-",
      "right": {
        "end": 9,
        "raw": "1",
        "start": 9,
        "type": "literal",
        "value": 1,
      },
      "start": 4,
      "type": "binary-expression",
    },
    "start": 0,
    "type": "binary-expression",
  },
  "start": 0,
  "type": "expression-statement",
}
`;

exports[`AST Parser > CallExpression 1`] = `
{
  "end": 17,
  "expression": {
    "args": [
      {
        "end": 15,
        "raw": "1",
        "start": 15,
        "type": "literal",
        "value": 1,
      },
    ],
    "callee": [
      {
        "args": [
          {
            "end": 10,
            "raw": "2",
            "start": 10,
            "type": "literal",
            "value": 2,
          },
          {
            "end": 12,
            "raw": "3",
            "start": 12,
            "type": "literal",
            "value": 3,
          },
        ],
        "callee": [
          {
            "callee": [
              {
                "end": 6,
                "object": [
                  {
                    "end": 4,
                    "object": [
                      {
                        "end": 2,
                        "object": [
                          {
                            "end": 0,
                            "name": "a",
                            "start": 0,
                            "type": "identifier",
                          },
                        ],
                        "property": {
                          "end": 2,
                          "name": "b",
                          "start": 2,
                          "type": "identifier",
                        },
                        "start": 1,
                        "type": "postfix-expression-member-access",
                      },
                    ],
                    "property": {
                      "end": 4,
                      "name": "c",
                      "start": 4,
                      "type": "identifier",
                    },
                    "start": 3,
                    "type": "postfix-expression-member-access",
                  },
                ],
                "property": {
                  "end": 6,
                  "name": "d",
                  "start": 6,
                  "type": "identifier",
                },
                "start": 5,
                "type": "postfix-expression-member-access",
              },
            ],
            "end": 8,
            "start": 7,
            "type": "postfix-expression-function-call",
          },
        ],
        "end": 13,
        "start": 9,
        "type": "postfix-expression-function-call",
      },
    ],
    "end": 16,
    "start": 0,
    "type": "postfix-expression-function-call",
  },
  "start": 0,
  "type": "expression-statement",
}
`;

exports[`AST Parser > ClassDeclaration 1`] = `
{
  "body": {
    "body": [],
    "end": 12,
    "start": 13,
    "type": "class-body",
  },
  "end": 13,
  "id": "To",
  "start": 0,
  "type": "zen-class",
}
`;

exports[`AST Parser > ClassDeclaration 2`] = `
{
  "body": {
    "body": [
      {
        "end": 57,
        "parameterList": {
          "end": 53,
          "params": [
            {
              "end": 53,
              "id": "a",
              "pType": {
                "end": 53,
                "name": "int",
                "start": 51,
                "type": "type-literal",
              },
              "start": 46,
              "type": "parameter",
            },
          ],
          "start": 46,
          "type": "parameter-list",
        },
        "start": 31,
        "type": "zen-constructor",
      },
      {
        "end": 85,
        "id": "b",
        "name": "val",
        "start": 65,
        "type": "VariableDeclaration",
        "vType": {
          "end": 79,
          "name": "string",
          "start": 74,
          "type": "type-literal",
        },
        "value": {
          "end": 84,
          "raw": "''",
          "start": 83,
          "type": "literal",
          "value": "",
        },
      },
      {
        "end": 116,
        "id": "c",
        "paramList": {
          "end": 112,
          "params": [
            {
              "end": 112,
              "id": "c",
              "pType": {
                "end": 112,
                "name": "bool",
                "start": 109,
                "type": "type-literal",
              },
              "start": 104,
              "type": "parameter",
            },
          ],
          "start": 104,
          "type": "parameter-list",
        },
        "start": 93,
        "type": "function",
      },
    ],
    "end": 121,
    "start": 24,
    "type": "class-body",
  },
  "end": 122,
  "id": "TheClass",
  "start": 5,
  "type": "zen-class",
}
`;

exports[`AST Parser > ConditionalExpression 1`] = `
{
  "end": 16,
  "expression": {
    "condition": {
      "end": 0,
      "name": "a",
      "start": 0,
      "type": "identifier",
    },
    "end": 15,
    "invalid": {
      "end": 15,
      "raw": "false",
      "start": 11,
      "type": "literal",
      "value": false,
    },
    "start": 0,
    "type": "conditional-expression",
    "valid": {
      "end": 7,
      "raw": "true",
      "start": 4,
      "type": "literal",
      "value": true,
    },
  },
  "start": 0,
  "type": "expression-statement",
}
`;

exports[`AST Parser > FunctionDeclaration 1`] = `
{
  "end": 26,
  "id": "fun",
  "returnType": {
    "end": 23,
    "name": "string",
    "start": 18,
    "type": "type-literal",
  },
  "start": 0,
  "type": "function",
}
`;

exports[`AST Parser > FunctionDeclaration 2`] = `
{
  "end": 39,
  "expandType": {
    "end": 13,
    "name": "string",
    "start": 8,
    "type": "type-literal",
  },
  "id": "createArray",
  "returnType": {
    "end": 36,
    "name": "void",
    "start": 33,
    "type": "type-literal",
  },
  "start": 0,
  "type": "expand-function",
}
`;

exports[`AST Parser > GlobalStaticDeclaration 1`] = `
{
  "end": 24,
  "id": "a",
  "name": "global",
  "start": 0,
  "type": "VariableDeclaration",
  "vType": {
    "end": 15,
    "name": "bool",
    "start": 12,
    "type": "type-literal",
  },
  "value": {
    "end": 23,
    "raw": "false",
    "start": 19,
    "type": "literal",
    "value": false,
  },
}
`;

exports[`AST Parser > GlobalStaticDeclaration 2`] = `
{
  "end": 23,
  "id": "b",
  "name": "static",
  "start": 0,
  "type": "VariableDeclaration",
  "vType": {
    "end": 17,
    "name": "string",
    "start": 12,
    "type": "type-literal",
  },
  "value": {
    "end": 22,
    "raw": "''",
    "start": 21,
    "type": "literal",
    "value": "",
  },
}
`;

exports[`AST Parser > ImportDeclaration 1`] = `
{
  "end": 18,
  "name": {
    "end": 17,
    "ids": [
      "xxx",
      "xxx",
      "xxx",
    ],
    "start": 7,
    "type": "qualified-name",
  },
  "start": 0,
  "type": "import",
}
`;

exports[`AST Parser > PostFixExpression > PostfixExpressionArray 1`] = `
{
  "end": 10,
  "expression": {
    "end": 9,
    "object": [
      {
        "end": 6,
        "object": [
          {
            "end": 3,
            "object": [
              {
                "end": 0,
                "name": "a",
                "start": 0,
                "type": "identifier",
              },
            ],
            "property": {
              "end": 2,
              "raw": "1",
              "start": 2,
              "type": "literal",
              "value": 1,
            },
            "start": 1,
            "type": "postfix-expression-member-access",
          },
        ],
        "property": {
          "end": 5,
          "raw": "2",
          "start": 5,
          "type": "literal",
          "value": 2,
        },
        "start": 4,
        "type": "postfix-expression-member-access",
      },
    ],
    "property": {
      "end": 8,
      "raw": "3",
      "start": 8,
      "type": "literal",
      "value": 3,
    },
    "start": 0,
    "type": "postfix-expression-member-access",
  },
  "start": 0,
  "type": "expression-statement",
}
`;

exports[`AST Parser > PostFixExpression > PostfixExpressionAsType 1`] = `
{
  "end": 11,
  "expression": {
    "end": 10,
    "left": {
      "end": 0,
      "name": "a",
      "start": 0,
      "type": "identifier",
    },
    "operator": "as",
    "right": {
      "end": 10,
      "name": "string",
      "start": 5,
      "type": "type-literal",
    },
    "start": 0,
    "type": "binary-expression",
  },
  "start": 0,
  "type": "expression-statement",
}
`;

exports[`AST Parser > PostFixExpression > PostfixExpressionFunctionCall 1`] = `
{
  "end": 11,
  "expression": {
    "callee": [
      {
        "args": [
          {
            "end": 7,
            "raw": "3",
            "start": 7,
            "type": "literal",
            "value": 3,
          },
        ],
        "callee": [
          {
            "args": [
              {
                "end": 2,
                "raw": "1",
                "start": 2,
                "type": "literal",
                "value": 1,
              },
              {
                "end": 4,
                "raw": "2",
                "start": 4,
                "type": "literal",
                "value": 2,
              },
            ],
            "callee": [
              {
                "end": 0,
                "name": "a",
                "start": 0,
                "type": "identifier",
              },
            ],
            "end": 5,
            "start": 1,
            "type": "postfix-expression-function-call",
          },
        ],
        "end": 8,
        "start": 6,
        "type": "postfix-expression-function-call",
      },
    ],
    "end": 10,
    "start": 0,
    "type": "postfix-expression-function-call",
  },
  "start": 0,
  "type": "expression-statement",
}
`;

exports[`AST Parser > PostFixExpression > PostfixExpressionInstanceofType 1`] = `
{
  "end": 19,
  "expression": {
    "end": 18,
    "left": {
      "end": 0,
      "name": "a",
      "start": 0,
      "type": "identifier",
    },
    "operator": "instanceof",
    "right": {
      "end": 18,
      "name": "string",
      "start": 13,
      "type": "type-literal",
    },
    "start": 0,
    "type": "binary-expression",
  },
  "start": 0,
  "type": "expression-statement",
}
`;

exports[`AST Parser > PostFixExpression > PostfixExpressionMemberAccess 1`] = `
{
  "end": 7,
  "expression": {
    "end": 6,
    "object": [
      {
        "end": 4,
        "object": [
          {
            "end": 2,
            "object": [
              {
                "end": 0,
                "name": "a",
                "start": 0,
                "type": "identifier",
              },
            ],
            "property": {
              "end": 2,
              "name": "b",
              "start": 2,
              "type": "identifier",
            },
            "start": 1,
            "type": "postfix-expression-member-access",
          },
        ],
        "property": {
          "end": 4,
          "name": "c",
          "start": 4,
          "type": "identifier",
        },
        "start": 3,
        "type": "postfix-expression-member-access",
      },
    ],
    "property": {
      "end": 6,
      "name": "d",
      "start": 6,
      "type": "identifier",
    },
    "start": 0,
    "type": "postfix-expression-member-access",
  },
  "start": 0,
  "type": "expression-statement",
}
`;

exports[`AST Parser > PostFixExpression > PostfixExpressionRange 1`] = `
{
  "end": 7,
  "expression": {
    "end": 6,
    "left": [
      {
        "end": 0,
        "raw": "1",
        "start": 0,
        "type": "literal",
        "value": 1,
      },
    ],
    "right": {
      "end": 6,
      "raw": "10",
      "start": 5,
      "type": "literal",
      "value": 10,
    },
    "start": 0,
    "type": "postfix-expression-range",
  },
  "start": 0,
  "type": "expression-statement",
}
`;

exports[`AST Parser > PrimaryExpression > array init expr case 1`] = `
{
  "end": 9,
  "expression": {
    "elements": [
      {
        "end": 1,
        "raw": "1",
        "start": 1,
        "type": "literal",
        "value": 1,
      },
      {
        "end": 3,
        "raw": "3",
        "start": 3,
        "type": "literal",
        "value": 3,
      },
      {
        "end": 5,
        "raw": "4",
        "start": 5,
        "type": "literal",
        "value": 4,
      },
      {
        "end": 7,
        "raw": "5",
        "start": 7,
        "type": "literal",
        "value": 5,
      },
    ],
    "end": 8,
    "start": 0,
    "type": "array-initializer-expression",
  },
  "start": 0,
  "type": "expression-statement",
}
`;

exports[`AST Parser > PrimaryExpression > bracket handler expr case 1`] = `
{
  "end": 19,
  "expression": {
    "end": 18,
    "parts": [
      "minecraft",
      ":",
      "apple",
      ":",
      "*",
    ],
    "start": 0,
    "type": "bracket-handler-expression",
  },
  "start": 0,
  "type": "expression-statement",
}
`;

exports[`AST Parser > PrimaryExpression > identifier case 1`] = `
{
  "end": 3,
  "expression": {
    "end": 2,
    "name": "abc",
    "start": 0,
    "type": "identifier",
  },
  "start": 0,
  "type": "expression-statement",
}
`;

exports[`AST Parser > PrimaryExpression > lambda function expr case 1`] = `
{
  "end": 17,
  "expression": {
    "end": 16,
    "paramList": {
      "end": 13,
      "params": [
        {
          "end": 9,
          "id": "a",
          "start": 9,
          "type": "parameter",
        },
        {
          "end": 11,
          "id": "b",
          "start": 11,
          "type": "parameter",
        },
        {
          "end": 13,
          "id": "c",
          "start": 13,
          "type": "parameter",
        },
      ],
      "start": 9,
      "type": "parameter-list",
    },
    "start": 0,
    "type": "lambda-function",
  },
  "start": 0,
  "type": "expression-statement",
}
`;

exports[`AST Parser > PrimaryExpression > literal case 1`] = `
{
  "end": 1,
  "expression": {
    "end": 0,
    "raw": "1",
    "start": 0,
    "type": "literal",
    "value": 1,
  },
  "start": 0,
  "type": "expression-statement",
}
`;

exports[`AST Parser > PrimaryExpression > map init expr case 1`] = `
{
  "end": 14,
  "expression": {
    "end": 13,
    "entries": [
      {
        "end": 5,
        "key": {
          "end": 1,
          "name": "a",
          "start": 1,
          "type": "identifier",
        },
        "start": 1,
        "type": "map-entry",
        "value": {
          "end": 5,
          "raw": "1",
          "start": 5,
          "type": "literal",
          "value": 1,
        },
      },
      {
        "end": 12,
        "key": {
          "end": 8,
          "name": "b",
          "start": 8,
          "type": "identifier",
        },
        "start": 8,
        "type": "map-entry",
        "value": {
          "end": 12,
          "raw": "2",
          "start": 12,
          "type": "literal",
          "value": 2,
        },
      },
    ],
    "start": 0,
    "type": "map-initializer-expression",
  },
  "start": 0,
  "type": "expression-statement",
}
`;

exports[`AST Parser > TypeLiteral 1`] = `
{
  "end": 25,
  "expression": {
    "end": 25,
    "left": {
      "end": 0,
      "name": "a",
      "start": 0,
      "type": "identifier",
    },
    "operator": "as",
    "right": {
      "end": 25,
      "name": "array-type",
      "start": 5,
      "type": "type-literal",
      "value": {
        "end": 23,
        "key": {
          "end": 14,
          "name": "int",
          "start": 12,
          "type": "type-literal",
        },
        "name": "map-type",
        "start": 5,
        "type": "type-literal",
        "value": {
          "end": 15,
          "key": {
            "end": 14,
            "name": "int",
            "start": 12,
            "type": "type-literal",
          },
          "name": "map-type",
          "start": 5,
          "type": "type-literal",
          "value": {
            "end": 10,
            "name": "string",
            "start": 5,
            "type": "type-literal",
          },
        },
      },
    },
    "start": 0,
    "type": "binary-expression",
  },
  "start": 0,
  "type": "expression-statement",
}
`;

exports[`AST Parser > TypeLiteral 2`] = `
{
  "end": 29,
  "expression": {
    "end": 28,
    "left": {
      "end": 0,
      "name": "b",
      "start": 0,
      "type": "identifier",
    },
    "operator": "as",
    "right": {
      "end": 28,
      "name": "list-type",
      "start": 5,
      "type": "type-literal",
      "value": {
        "end": 27,
        "name": "function-type",
        "paramTypes": [
          {
            "end": 20,
            "name": "string",
            "start": 15,
            "type": "type-literal",
          },
        ],
        "returnType": {
          "end": 27,
          "name": "array-type",
          "start": 22,
          "type": "type-literal",
          "value": {
            "end": 25,
            "name": "void",
            "start": 22,
            "type": "type-literal",
          },
        },
        "start": 6,
        "type": "type-literal",
      },
    },
    "start": 0,
    "type": "binary-expression",
  },
  "start": 0,
  "type": "expression-statement",
}
`;

exports[`AST Parser > TypeLiteral 3`] = `
{
  "end": 12,
  "expression": {
    "end": 11,
    "left": {
      "end": 0,
      "name": "c",
      "start": 0,
      "type": "identifier",
    },
    "operator": "as",
    "right": {
      "end": 11,
      "name": "array-type",
      "start": 5,
      "type": "type-literal",
      "value": {
        "end": 9,
        "ids": [
          "a",
          "b",
          "C",
        ],
        "name": "class-type",
        "start": 5,
        "type": "type-literal",
      },
    },
    "start": 0,
    "type": "binary-expression",
  },
  "start": 0,
  "type": "expression-statement",
}
`;

exports[`AST Parser > TypeLiteral 4`] = `
{
  "end": 8,
  "expression": {
    "end": 7,
    "left": {
      "end": 0,
      "name": "c",
      "start": 0,
      "type": "identifier",
    },
    "operator": "as",
    "right": {
      "end": 7,
      "name": "array-type",
      "start": 5,
      "type": "type-literal",
      "value": {
        "end": 5,
        "ids": [
          "C",
        ],
        "name": "class-type",
        "start": 5,
        "type": "type-literal",
      },
    },
    "start": 0,
    "type": "binary-expression",
  },
  "start": 0,
  "type": "expression-statement",
}
`;

exports[`AST Parser > TypeLiteral 5`] = `
{
  "end": 17,
  "expression": {
    "end": 16,
    "left": {
      "end": 0,
      "name": "c",
      "start": 0,
      "type": "identifier",
    },
    "operator": "as",
    "right": {
      "end": 16,
      "name": "array-type",
      "start": 5,
      "type": "type-literal",
      "value": {
        "end": 14,
        "name": "list-type",
        "start": 5,
        "type": "type-literal",
        "value": {
          "end": 13,
          "name": "list-type",
          "start": 6,
          "type": "type-literal",
          "value": {
            "end": 12,
            "name": "string",
            "start": 7,
            "type": "type-literal",
          },
        },
      },
    },
    "start": 0,
    "type": "binary-expression",
  },
  "start": 0,
  "type": "expression-statement",
}
`;
